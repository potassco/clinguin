
ClingraphBackend
----------------

Extends :ref:`ClingoMultishotBackend` with functionality to render and interact with `clingraph <https://clingraph.readthedocs.io/en/latest/>`_ images.

.. warning::

    To use this backend you might need to manually install Graphviz. See the `clingraph instalaltion <https://clingraph.readthedocs.io/en/latest/>`_ for details.

.. admonition:: Examples


    * `graph_coloring <https://github.com/krr-up/clinguin/tree/master/examples/angular/graph_coloring>`_
    * `tree_browser <https://github.com/krr-up/clinguin/tree/master/examples/angular/tree_browser>`_
    * `ast <https://github.com/krr-up/clinguin/tree/master/examples/angular/ast>`_


This backend will allow the use of clingraph images inside a canvas element.
To use this feature, the user must provide a clingraph visualization encoding via the command line in argument ``--clingraph-files``.
The input to this encoding will be the :ref:`domain-state` (same input as for the :ref:`ui-files`).

.. tip::

    The clingraph encoding will also have information about brave, and cautious consequences.
    So dont be afraid to use it in the graphs!

A clinguin ``canvas`` is enhanced with an attribute ``image_type``.
When the value for this attirbute starts with  ``clingraph`` it will be substituted by the :ref:`ClingraphBackend` for the ``svg`` representation of the graph.
By default the graph named ``default`` will be used, another graph with name ``X`` can be used by setting the image type to ``clingraph__X``

.. note::

    To use this backend with the :ref:`TkinterFrontend`, you must provide the option ``--intermediate-format=png``.

.. admonition:: Examples


    Creates a canvas in a window that will contain the default clingraph graph

    .. code-block::

        elem(c, canvas, window).
        attr(c, image_type, clingraph).

.. currentmodule:: clinguin.server.application.backends


Interacting with the graph
++++++++++++++++++++++++++


To interact with the clingraph nodes/edges, additional steps must be made.
Each node/edge must be added to the UI as an element inside the canvas using the type  ``svg_node`` (``svg_edge``).
This type of elements require the identifier of the clingraph node/edge in argument ``clingraph_id``
to link the interactivity with the svg element generated by clingraph.

.. admonition:: Examples


    Continuation of the previous example.

    .. code-block::

        elem(n(X), svg_node, c).
        attr(n(X), clingraph_id, X):- node(X).

    ``node(X)`` is generated in the `ui-files`


.. tip::

    Notice that the clingraph nodes are not accesible by the `ui-files`.
    Therefore, nodes of the clingraph images have to be generated again in this encoding.

    Consider separating the clingraph node generation into a diferent encoding,
    and then including it in the UI and clingraph encodings.

.. warning::

    The interactive feature only work in web based frontends, not in Tkinter.

.. note::

    ``update`` actions applied to clingraph elements (`svg_nodes`) will update the html style, not the graphviz properties.
    Therefore, it can be used to set things like visibility and opacity but not internal clingraph values.


Public operations
+++++++++++++++++

Can be used as `OPERATION` in the actions of the :ref:`ui-state`
Also includes all public operations from the :ref:`ClingoBackend`.

.. autoclass:: ClingraphBackend
    :members:
    :noindex:
    :exclude-members: register_options


Domain state constructors
+++++++++++++++++++++++++

The domain state also inclues domain constructors from the :ref:`ClingoBackend`


